<?xml version='1.0' encoding='UTF-8'?>
<detailedreport xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://www.veracode.com/schema/reports/export/1.0" xsi:schemaLocation="https://www.veracode.com/schema/reports/export/1.0 https://analysiscenter.veracode.com/resource/detailedreport.xsd" report_format_version="1.5" app_name="NMLV Hub" app_id="208253" first_build_submitted_date="2016-01-12 21:49:30 UTC" version="17 Apr 2017 Static" build_id="1292365" submitter="Jenkins Core" platform="Not Specified" assurance_level="5" business_criticality="5" generation_date="2017-04-18 18:12:59 UTC" veracode_level="VL1" total_flaws="336" flaws_not_mitigated="336" teams="NMLV" life_cycle_stage="Not Specified" planned_deployment_date="2016-01-12 06:00:00 UTC" last_update_time="2017-04-18 02:50:47 UTC" is_latest_build="true" policy_name="NM VL3 Custom Policy" policy_version="3" policy_compliance_status="Did Not Pass" policy_rules_status="Did Not Pass" grace_period_expired="true" scan_overdue="false" business_owner="Zach Zastrow" business_unit="Not Specified" tags="" legacy_scan_engine="false">
  <static-analysis rating="F" score="55" submitted_date="2017-04-18 02:21:42 UTC" published_date="2017-04-18 02:50:43 UTC" version="17 Apr 2017 Static" analysis_size_bytes="964919" engine_version="106403">
    <modules>
      <module name="JS files within veracode.zip" compiler="JAVASCRIPT_5_1" os="JavaScript" architecture="JAVASCRIPT" loc="0" score="55" numflawssev0="0" numflawssev1="0" numflawssev2="0" numflawssev3="325" numflawssev4="10" numflawssev5="1" />
    </modules>
  </static-analysis>
  <severity level="5">
    <category categoryid="18" categoryname="OS Command Injection" pcirelated="false">
      <desc>
        <para text="OS command injection vulnerabilities occur when data enters an application from an untrusted source and is used to dynamically construct and execute a system command.  This allows an attacker to either alter the command executed by the application or append additional commands.  The command is typically executed with the privileges of the executing process and gives an attacker a privilege or capability that he would not otherwise have." />
      </desc>
      <recommendations>
        <para text="Careful handling of all untrusted data is critical in preventing OS command injection attacks.   Using one or more of the following techniques provides defense-in-depth and minimizes the likelihood of an vulnerability.">
          <bulletitem text="If possible, use library calls rather than external processes to recreate the desired functionality." />
          <bulletitem text="Validate user-supplied input using positive filters (white lists) to ensure that it conforms to the expected format, using centralized data validation routines when possible. " />
          <bulletitem text="Select safe API routines.  Some APIs that execute system commands take an array of strings as input rather than a single string, which protects against some forms of command injection by ensuring that a user-supplied argument cannot be interpreted as part of the command." />
        </para>
      </recommendations>
      <cwe cweid="352" cwename="Cross-Site Request Forgery (CSRF)" pcirelated="false" owasp="929" sans="864" certc="741" certcpp="875" certjava="845">
        <description>
          <text text="The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request." />
        </description>
        <staticflaws>
          <flaw severity="5" categoryname="Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" count="1" issueid="632" module="JS files within veracode.zip" type="util.exec" description="This call to util.exec() contains a command injection flaw. The argument to the function is constructed using untrusted input. If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process. The level of exposure depends on the effectiveness of input validation routines, if any.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters. Most APIs that execute system commands also have a &quot;safe&quot; version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (http://cwe.mitre.org/data/definitions/78.html) &#xd;&#xa;OWASP (http://www.owasp.org/index.php/Command_Injection) &#xd;&#xa;WASC (http://webappsec.pbworks.com/OS-Commanding)&#xd;&#xa;&#xd;&#xa;" note="" cweid="78" remediationeffort="3" exploitLevel="1" categoryid="18" pcirelated="true" date_first_occurrence="2017-01-25 19:07:57 UTC" remediation_status="Open" cia_impact="ccp" grace_period_expires="2017-02-07 16:03:30 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="clone.js" line="9" sourcefilepath="/tmp/veracode-upload/" scope="^::!main::!lambda1" functionprototype="!js_object !func(!js_object, !js_object, ...)" functionrelativelocation="-1" />
        </staticflaws>
      </cwe>
    </category>
  </severity>
  <severity level="4">
    <category categoryid="19" categoryname="SQL Injection" pcirelated="false">
      <desc>
        <para text="SQL injection vulnerabilities occur when data enters an application from an untrusted source and is used to dynamically construct a SQL query.  This allows an attacker to manipulate database queries in order to access, modify, or delete arbitrary data.  Depending on the platform, database type, and configuration, it may also be possible to execute administrative operations on the database, access the filesystem, or execute arbitrary system commands.  SQL injection attacks can also be used to subvert authentication and authorization schemes, which would enable an attacker to gain privileged access to restricted portions of the application." />
      </desc>
      <recommendations>
        <para text="Several techniques can be used to prevent SQL injection attacks. These techniques complement each other and address security at different points in the application. Using multiple techniques provides defense-in-depth and minimizes the likelihood of a SQL injection vulnerability.">
          <bulletitem text="Use parameterized prepared statements rather than dynamically constructing SQL queries.  This will prevent the database from interpreting the contents of bind variables as part of the query and is the most effective defense against SQL injection." />
          <bulletitem text="Validate user-supplied input using positive filters (white lists) to ensure that it conforms to the expected format, using centralized data validation routines when possible. " />
          <bulletitem text="Normalize all user-supplied data before applying filters or regular expressions, or submitting the data to a database. This means that all URL-encoded (%xx), HTML-encoded (&amp;#xx;), or other encoding schemes should be reduced to the internal character representation expected by the application. This prevents attackers from using alternate encoding schemes to bypass filters." />
          <bulletitem text="When using database abstraction libraries such as Hibernate, do not assume that all methods exposed by the API will automatically prevent SQL injection attacks.  Most libraries contain methods that pass arbitrary queries to the database in an unsafe manner." />
        </para>
      </recommendations>
      <cwe cweid="89" cwename="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" pcirelated="false" owasp="929" sans="864">
        <description>
          <text text="This database query contains a SQL injection flaw.  The function call constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database." />
        </description>
        <staticflaws>
          <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="626" module="JS files within veracode.zip" type="sqlite3.Database.exec" description="This database query contains a SQL injection flaw. The call to sqlite3.Database.exec() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (http://cwe.mitre.org/data/definitions/89.html) &#xd;&#xa;OWASP (http://www.owasp.org/index.php/SQL_injection) &#xd;&#xa;WASC (http://webappsec.pbworks.com/SQL-Injection)&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2017-01-25 19:07:57 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-02-07 16:03:30 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="clone.js" line="9" sourcefilepath="/tmp/veracode-upload/" scope="^::!main::!lambda1" functionprototype="!js_object !func(!js_object, !js_object, ...)" functionrelativelocation="-1" />
          <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="595" module="JS files within veracode.zip" type="sqlite3.Database.get" description="This database query contains a SQL injection flaw. The call to sqlite3.Database.get() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (http://cwe.mitre.org/data/definitions/89.html) &#xd;&#xa;OWASP (http://www.owasp.org/index.php/SQL_injection) &#xd;&#xa;WASC (http://webappsec.pbworks.com/SQL-Injection)&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2017-02-06 16:52:24 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-02-07 16:03:30 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="getemailaddress.js" line="16" sourcefilepath="/tmp/cxid-authemail/src/components/" scope="^::!main::!lambda1" functionprototype="!js_object !func(!js_object, !js_object, !js_object, ...)" functionrelativelocation="-1" />
          <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="501" module="JS files within veracode.zip" type="sqlite3.Database.get" description="This database query contains a SQL injection flaw. The call to sqlite3.Database.get() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (http://cwe.mitre.org/data/definitions/89.html) &#xd;&#xa;OWASP (http://www.owasp.org/index.php/SQL_injection) &#xd;&#xa;WASC (http://webappsec.pbworks.com/SQL-Injection)&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2017-02-06 16:52:24 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-02-07 16:03:30 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="getfactors.js" line="12" sourcefilepath="/tmp/cxid-ms-mfa/components/" scope="^::!main::!lambda1" functionprototype="!js_object !func(!js_object, !js_object, !js_object, ...)" functionrelativelocation="-1" />
          <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="579" module="JS files within veracode.zip" type="sqlite3.Database.get" description="This database query contains a SQL injection flaw. The call to sqlite3.Database.get() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (http://cwe.mitre.org/data/definitions/89.html) &#xd;&#xa;OWASP (http://www.owasp.org/index.php/SQL_injection) &#xd;&#xa;WASC (http://webappsec.pbworks.com/SQL-Injection)&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2017-02-06 16:52:24 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-02-07 16:03:30 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="getprofile.js" line="39" sourcefilepath="/tmp/cxid-ms-authprofile/components/" scope="^::!main::!lambda1" functionprototype="!js_object !func(!js_object, !js_object, !js_object, ...)" functionrelativelocation="-1" />
          <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="695" module="JS files within veracode.zip" type="sqlite3.Database.get" description="This database query contains a SQL injection flaw. The call to sqlite3.Database.get() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (http://cwe.mitre.org/data/definitions/89.html) &#xd;&#xa;OWASP (http://www.owasp.org/index.php/SQL_injection) &#xd;&#xa;WASC (http://webappsec.pbworks.com/SQL-Injection)&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2017-03-28 21:19:28 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-03-28 22:18:49 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="getprofiledata.js" line="15" sourcefilepath="/tmp/cxid-authemail/src/components/" scope="^::!main::!lambda1" functionprototype="!js_object !func(!js_object, !js_object, !js_object, ...)" functionrelativelocation="-1" />
          <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="809" module="JS files within veracode.zip" type="sqlite3.Database.get" description="This database query contains a SQL injection flaw. The call to sqlite3.Database.get() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (http://cwe.mitre.org/data/definitions/89.html) &#xd;&#xa;OWASP (http://www.owasp.org/index.php/SQL_injection) &#xd;&#xa;WASC (http://webappsec.pbworks.com/SQL-Injection)&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2017-04-04 02:02:03 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-04-04 03:01:31 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="getquestionlist.js" line="14" sourcefilepath="/tmp/cxid-ms-loginprofile/components/mfa/" scope="^::!main::!lambda1" functionprototype="!js_object !func(!js_object, !js_object, !js_object, ...)" functionrelativelocation="-1" />
          <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="813" module="JS files within veracode.zip" type="sqlite3.Database.get" description="This database query contains a SQL injection flaw. The call to sqlite3.Database.get() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (http://cwe.mitre.org/data/definitions/89.html) &#xd;&#xa;OWASP (http://www.owasp.org/index.php/SQL_injection) &#xd;&#xa;WASC (http://webappsec.pbworks.com/SQL-Injection)&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2017-04-07 02:01:36 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-04-07 03:14:53 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="getquestionlist.js" line="14" sourcefilepath="/tmp/cxid-ms-mfa/components/" scope="^::!main::!lambda1" functionprototype="!js_object !func(!js_object, !js_object, !js_object, ...)" functionrelativelocation="-1" />
          <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="624" module="JS files within veracode.zip" type="mysql.Connection.query" description="This database query contains a SQL injection flaw. The call to mysql.Connection.query() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (http://cwe.mitre.org/data/definitions/89.html) &#xd;&#xa;OWASP (http://www.owasp.org/index.php/SQL_injection) &#xd;&#xa;WASC (http://webappsec.pbworks.com/SQL-Injection)&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2017-01-25 19:07:57 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-02-07 16:03:30 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="gitlab.js" line="28" sourcefilepath="/tmp/veracode-upload/" scope="^::!main::!lambda1::!func::!lambda2" functionprototype="!js_object !func(!js_object, !js_object, !js_object, !js_object, ...)" functionrelativelocation="-1" />
          <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="628" module="JS files within veracode.zip" type="mysql.Connection.query" description="This database query contains a SQL injection flaw. The call to mysql.Connection.query() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (http://cwe.mitre.org/data/definitions/89.html) &#xd;&#xa;OWASP (http://www.owasp.org/index.php/SQL_injection) &#xd;&#xa;WASC (http://webappsec.pbworks.com/SQL-Injection)&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2017-01-25 19:07:57 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-02-07 16:03:30 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="gitlab.js" line="39" sourcefilepath="/tmp/veracode-upload/" scope="^::!main::!lambda1::!func::!lambda2" functionprototype="!js_object !func(!js_object, !js_object, !js_object, !js_object, ...)" functionrelativelocation="-1" />
          <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="397" module="JS files within veracode.zip" type="sqlite3.Database.get" description="This database query contains a SQL injection flaw. The call to sqlite3.Database.get() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (http://cwe.mitre.org/data/definitions/89.html) &#xd;&#xa;OWASP (http://www.owasp.org/index.php/SQL_injection) &#xd;&#xa;WASC (http://webappsec.pbworks.com/SQL-Injection)&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2017-02-06 16:52:24 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-02-07 16:03:30 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="registerUserService.js" line="65" sourcefilepath="/tmp/registration-client/src/server/routes/api/" scope="^::!main::!lambda4" functionprototype="!js_object !func(!js_object, !js_object, !js_object, ...)" functionrelativelocation="-1" />
        </staticflaws>
      </cwe>
    </category>
  </severity>
  <severity level="3" />
  <severity level="2" />
  <severity level="1" />
  <severity level="0" />
  <flaw-status new="1" reopen="0" open="335" cannot-reproduce="0" fixed="1" total="336" not_mitigated="336" sev-1-change="0" sev-2-change="0" sev-3-change="0" sev-4-change="0" sev-5-change="0" />
</detailedreport>